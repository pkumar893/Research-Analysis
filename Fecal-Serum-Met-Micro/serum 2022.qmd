---
title: "TAC Analysis Serum 2022"
author: "Prashant Kumar"
format: 
  html:
    code-fold: true
    toc: true
    toc-location: right
    embed-resources: true
editor: source
---

```{r message=FALSE, warning=FALSE, echo=FALSE}
library(readxl)
library(dplyr)
library(stringr)
library(gt)
library(ggplot2)
library(openxlsx)
library(tidyverse)
library(ropls)  # For PLS-DA
library(pheatmap)
library(RColorBrewer)
library(ggpubr)
library(factoextra)
library(FactoMineR)
library(limma)
library(igraph)
library(WGCNA)
library(ggraph)
library(pathview)
library(clusterProfiler)
library(tibble)
library(corrplot)
library(ggforce)
```


```{r echo=FALSE}
# dir.exists("E:/Ajit data analysis/Tac/serum 2022")
# getwd()
# setwd("E:\\Ajit data analysis\\Tac\\serum 2022") 
# setwd(original_dir)

serum1 <- read_excel("serum metablomics 2022.xlsx")

metabolites <- colnames(serum1)[-1]


clean_names <- gsub("^_|_$", "", gsub("_+", "_", gsub("[-() ]", "_", metabolites)))

clean_names <- gsub("^[0-9]+_|_[0-9]+_|_[0-9]+$|[0-9]+_", "", clean_names)

# gsub("^_|_$", "", gsub("_+", "_", gsub("[() ]", "_", metabolites)))
# gsub("^_|_$", "", gsub("_+", "_", gsub("[-() ]", "_", metabolites)))

colnames(serum1)[-1] <- clean_names


metabolites <- colnames(serum1)[-c(1, 2)]
clean_names <- gsub("[() ]", "_", metabolites)
colnames(serum1)[-c(1, 2)] <- clean_names


serum1 <- serum1 %>% 
  rename(Sample = Group) 

serum1 <- serum1 %>% 
  mutate(
    Group = case_when(
      grepl("WT-Sham", Sample) ~ "Sham",
      grepl("WT-TAC-V", Sample) ~ "TAC_V",
      grepl("WT-TAC-", Sample) & !grepl("FMT", Sample) & !grepl("-V", Sample) ~ "TAC",
      TRUE ~ "Other"
    ), .after = "Sample"
  ) %>% 
  mutate(Group = as.factor(Group))

table(serum1$Group)


sample_info <- serum1 %>% select(Sample, Group) %>% mutate(Group = as.factor(Group))
metabolite_serum1 <- serum1 %>% select(-Group)


# rownames(metabolite_serum1) <- metabolite_serum1$Sample
# metabolite_serum1 <- metabolite_serum1 %>% select(-Sample)

metabolite_serum1 <- metabolite_serum1 %>% column_to_rownames("Sample")

# Transpose to have metabolites as rows
metabolite_serum1_t <- t(metabolite_serum1)
# colnames(metabolite_serum1_t) <- rownames(metabolite_serum1)
# rownames(metabolite_serum1_t) <- colnames(metabolite_serum1)

```


## Multivariate Analysis
# Partial Least Squares Discriminant Analysis (plsda)
```{r}
scaled_serum1 <- scale(metabolite_serum1)
pca_result <- prcomp(scaled_serum1, scale. = TRUE)
pca_summary <- summary(pca_result)


scores_df <- data.frame(
  PC1   = pca_result$x[, 1],
  PC2   = pca_result$x[, 2],
  Group = factor(sample_info$Group, levels = unique(sample_info$Group))
)


# 2) get the convex-hull points for each group
hulls <- scores_df %>%
  group_by(Group) %>%
  slice(chull(PC1, PC2)) %>%
  ungroup()

# 3) plot points + smooth “curvy” hull lines
pca_plot <- ggplot(scores_df, aes(x = PC1, y = PC2, color = Group)) +
  geom_point(size = 2, alpha = 0.5) +
  
  # B-spline closed hull
  geom_bspline_closed(
    data   = hulls,
    aes(x = PC1, y = PC2, group = Group, color = Group),
    n      = 70,       # more knots → smoother curve
    size   = 0.4,      # line thickness
    alpha  = 0.2,      # transparency of line
    fill   = NA        # no fill
  ) +
  
  scale_color_manual(
    values = brewer.pal(n = length(unique(scores_df$Group)), name = "Set1")
  ) +
  
  labs(
    title = "PCA of Metabolite Profiles",
    x     = "PC1",
    y     = "PC2"
  ) +
  
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = "white"),
    plot.background  = element_rect(fill = "white"),
    panel.grid.major = element_line(color = "gray", size = 0.5),
    panel.grid.minor = element_line(color = "gray", size = 0.25),
    legend.position  = "top"
  )

print(pca_plot)


# # PCA visualization
# pca_plot <- fviz_pca_ind(pca_result,
#                          geom = "point",
#                          habillage = sample_info$Group,
#                          palette = brewer.pal(length(unique(sample_info$Group)), "Set1"),
#                          addEllipses = TRUE,
#                          ellipse.level = 0.95) +
#   labs(title = "PCA of Metabolite Profiles") +
#   theme_minimal() + 
#   theme(
#     panel.background = element_rect(fill = "white"), 
#     plot.background = element_rect(fill = "white"),  
#     panel.grid.major = element_line(color = "gray", size = 0.5), 
#     panel.grid.minor = element_line(color = "gray", size = 0.25)  
#   )
# # ggsave("E:/Ajit data analysis/Tac/fecal set1/pca_plot.png",
# #          width = 20, height = 15)
# pca_plot

# PLS-DA
plsda_result <- opls(scaled_serum1, 
                    as.factor(sample_info$Group),
                    predI = 2,
                    orthoI = 0)

# png("E:/Ajit data analysis/Tac/fecal set1/plsda_result.png", width = 20, height = 15, units = "in", res = 300)
# plot(plsda_result)
# 
# dev.off()

# Extract PLS-DA scores for plotting
plsda_scores <- getScoreMN(plsda_result)
plsda_serum1 <- as.data.frame(plsda_scores) %>%
  mutate(Group = sample_info$Group)

# Plot PLS-DA
plsda_plot <- ggplot(plsda_serum1, aes(x = p1, y = p2, color = Group)) +
  geom_point(size = 3, alpha = 0.8) +
  stat_ellipse(level = 0.95) +
  labs(
    title = "PLS-DA of Metabolite Profiles",
    x = "Component 1",
    y = "Component 2"
  ) +
  theme_minimal() + 
    theme(
    panel.background = element_rect(fill = "white"), 
    plot.background = element_rect(fill = "white"),  
    panel.grid.major = element_line(color = "gray", size = 0.5), 
    panel.grid.minor = element_line(color = "gray", size = 0.25)  
  ) +
  scale_color_brewer(palette = "Set1")
plsda_plot

# ggsave("E:/Ajit data analysis/Tac/fecal set1/plsda_plot.png", width = 20, height = 15)

```

## Diversity analysis
$\alpha\ \text{and}\ \beta$ diversity analysis
```{r}
library(vegan)

alpha_df <- data.frame(
  Sample  = rownames(metabolite_serum1),
  Shannon = diversity(metabolite_serum1, index = "shannon"),
  Simpson = diversity(metabolite_serum1, index = "simpson"),
  Group   = sample_info$Group
)

# Boxplots of Shannon by group
ggplot(alpha_df, aes(Group, Shannon, fill = Group)) +
  geom_boxplot() +
  geom_jitter(width = 0.2, alpha = 0.5) +
  labs(title = "α-Diversity (Shannon) by Group") +
  theme_minimal() +
  theme(legend.position = "none")


# 2) β-diversity: Bray–Curtis + PCoA
bc_dist <- vegdist(metabolite_serum1, method = "bray")

# PCoA ordination
pcoa    <- cmdscale(bc_dist, eig = TRUE, k = 2)
beta_df <- data.frame(
  PC1   = pcoa$points[,1],
  PC2   = pcoa$points[,2],
  Group = sample_info$Group
)

# hulls for β-ordination
hulls_b <- beta_df %>%
  group_by(Group) %>%
  slice(chull(PC1, PC2)) %>%
  ungroup()

# Plot PCoA with curvy hulls
ggplot(beta_df, aes(PC1, PC2, color = Group)) +
  geom_point(size = 2, alpha = 0.5) +
  geom_bspline_closed(
    data  = hulls_b,
    aes(x = PC1, y = PC2, group = Group, color = Group),
    n     = 60,
    size  = 0.4,
    alpha = 0.2,
    fill  = NA
  ) +
  scale_color_manual(values = brewer.pal(n = length(unique(beta_df$Group)), "Set1")) +
  labs(
    title = "β-Diversity (Bray–Curtis PCoA)",
    x     = "PCoA1",
    y     = "PCoA2"
  ) +
  theme_minimal() +
  theme(legend.position = "top")
```

## Another way
```{r}
library(phyloseq)

abund_table <- as.matrix(metabolite_serum1)

sample_df <- sample_info %>%
  column_to_rownames("Sample")


sd <- sample_data(sample_df)

# Creating an OTU table object (taxa_are_rows = FALSE since metabolites = columns)
otu <- otu_table(abund_table, taxa_are_rows = FALSE)

# Combining into a phyloseq object
ps <- phyloseq(otu, sd)

ps



# α-diversity
alpha_plot <- plot_richness(
  ps,
  x       = "Group",
  measures= c("Shannon", "Simpson")
) + 
  geom_boxplot(aes(fill = Group), alpha = 0.5, outlier.shape = NA) +
  geom_jitter(aes(color = Group), width = 0.2) +
  theme_minimal() +
  theme(legend.position = "none") +
  labs(title = "α-Diversity by Group")

# β-diversity ordination
ordu       <- ordinate(ps, method = "PCoA", distance = "bray")
beta_plot  <- plot_ordination(ps, ordu, color = "Group") +
  geom_point(size = 2, alpha = 0.5) +
  stat_ellipse(level = 0.95, type = "t", linetype = 2) +
  theme_minimal() +
  labs(
    title = "β-Diversity (Bray–Curtis PCoA)",
    x     = "PCoA1",
    y     = "PCoA2"
  ) +
  scale_color_manual(values = brewer.pal(n = length(unique(sample_data(ps)$Group)), "Set1")) +
  theme(legend.position = "top")

# Print them
print(alpha_plot)
print(beta_plot)

```

## Mice info
```{r}
mice_info <- read_excel("E:/Ajit data analysis/Tac/Tac ready to use.xlsx", 
                        sheet = 6, 
                        range = "A2:N20",
                        col_names = TRUE)

colnames(mice_info)[colnames(mice_info) == "Group"] <- "Sample"
  
integrated_data <- serum1 %>%
  left_join(mice_info, by = "Sample") %>% 
  select(-S.No, -Gender, -Purpose, -`Peak LS`, -`EF (%)`) %>% 
  rename(
    LV_Thickness = `LV Thickness (mm)`,
    LVW_mg = `LVW (mg)`,
    LVW_TL = `LVW/TL (mg/mm)`,
    HW_TL = `HW/TL (mg/mm)`,
    FS = `FS%`,
    HW_mg = `HW (mg)`,
    GLS = `GLS (%)`
  )

colnames(integrated_data)
```


## Pair-wise test (relation between Heart wt. and metabolite)
```{r}
# c("Sample", "Group", "LV_Thickness", "LVW_mg", "LVW_TL","HW_TL", "FS", "EF", "GLS", "HW_mg")

ggpairs(integrated_data[, c("HW_mg", 
                            setdiff(colnames(integrated_data), 
                                    c("Sample", "Group", 
                                      "LVW_mg", 
                                      "FS", "GLS", "HW_mg")))])

# Calculating the correlation matrix
cor_matrix <- cor(integrated_data[, c("HW_mg", 
                            setdiff(colnames(integrated_data), 
                                    c("Sample", "Group", 
                                      "LVW_mg", 
                                      "FS", "GLS", "HW_mg")))],
                  use = "complete.obs")
print(cor_matrix) 
```

## Model selection for linera regression
# stepwise
```{r}
predictors <- setdiff(colnames(integrated_data), 
                      c("Sample", "Group", "LV_Thickness", 
                        "LVW_mg", "LVW_TL","HW_TL", "FS", "EF", "GLS", "HW_mg"))


# formula_str_lm <- paste("HW_mg ~", paste(paste0("`", predictors, "`"), collapse = " + "))
# Converting to formula

formula_str_lm <- paste("HW_mg ~", paste(predictors, collapse = " + "))

lm_formula <- as.formula(formula_str_lm)

# Model
lm_model <- lm(lm_formula, data = integrated_data)
summary(lm_model)

step(lm(HW_mg ~ 1, data = integrated_data), 
     scope = lm_formula,
     direction = "forward")
```


# selected model
```{r}
lm <- lm(HW_mg ~ Alanine + Hypotaurine + Kynurenic_acid + 
    Heneicosylic_acid_Heneicosanoic_acid + Hypoxanthine + Homocysteine + 
    Arachidic_acid_Eicosanoic_acid + Phosphoglycerate + Glycerate + 
    Citraconate + alpha_Ketoisovalerate_KIV + Fructose + Adonitol + 
    Hydroxybutyrate + Adenosine + Anthranilic_acid + Indoleacrylic_acid + 
    Glycerol + beta_HydroxybutyrateHydroxybutyrate + Isoleucine + 
    Cadaverine + Citrulline + Guanine + Hydroxyanthranilic_acid + 
    Hydroxypyruvate + Aminoadipate + Cysteine, 
    data = integrated_data)
par(mar = c(4, 4, 1, 1))
plot(lm, pages = 1, scheme = 1)
```
